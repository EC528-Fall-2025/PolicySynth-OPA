from typing import Optional, Dict, Any, List
from dataclasses import dataclass, asdict
from datetime import datetime
import json
# generated by copilot given boto3 iam response


@dataclass
class PolicyStatement:
    effect: str
    action: List[str]
    resource: str
    condition: Optional[Dict[str, Any]] = None
    principal: Optional[str] = None
    not_action: Optional[List[str]] = None
    not_resource: Optional[str] = None


@dataclass
class PolicyDocument:
    version: str
    statement: List[PolicyStatement]


@dataclass
class IAMPolicy:
    document: PolicyDocument
    version_id: str
    is_default_version: bool
    create_date: str
    policy_name: Optional[str] = None
    policy_arn: Optional[str] = None
    policy_id: Optional[str] = None
    description: Optional[str] = None
    path: Optional[str] = None

    @classmethod
    def from_aws_response(cls, policy_response: Dict[str, Any]):
        """
        Create IAMPolicy data class instance from AWS IAM policy response
        """
        document_data = policy_response.get('Document', {})

        # Parse statements
        # method isn't used, same in scp 
        # but i'm sure we can use it if needed
        statements = []
        for stmt in document_data.get('Statement', []):
            statement = PolicyStatement(
                effect=stmt.get('Effect', ''),
                action=stmt.get('Action', []),
                resource=stmt.get('Resource', ''),
                condition=stmt.get('Condition'),
                principal=stmt.get('Principal'),
                not_action=stmt.get('NotAction'),
                not_resource=stmt.get('NotResource')
            )
            statements.append(statement)

        # Create policy document
        policy_doc = PolicyDocument(
            version=document_data.get('Version', ''),
            statement=statements
        )

        return cls(
            document=policy_doc,
            version_id=policy_response.get('VersionId', ''),
            is_default_version=policy_response.get('IsDefaultVersion', False),
            create_date=policy_response.get('CreateDate', ''),
            policy_name=policy_response.get('PolicyName'),
            policy_arn=policy_response.get('Arn'),
            policy_id=policy_response.get('PolicyId'),
            description=policy_response.get('Description'),
            path=policy_response.get('Path')
        )

    @classmethod
    def from_json_file(cls, policy_data: Dict[str, Any]):
        """
        Create IAMPolicy from JSON file format like your example
        """
        return cls.from_aws_response(policy_data)

    def to_policy_document_json(self) -> str:
        """
        Return just the policy document as JSON string (for use with AWS APIs)
        """
        return json.dumps(asdict(self.document), indent=2)

    def __str__(self) -> str:
        """
        Print an IAMPolicy object in nicely formatted JSON representation
        """
        return json.dumps(asdict(self), indent=2, default=str)
